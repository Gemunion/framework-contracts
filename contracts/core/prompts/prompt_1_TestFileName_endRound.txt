---
target: /Users/gur/Documents/gemunion/framework-contracts/contracts/core/test/Mechanics/LotteryRandom/shared/endRound.ts
---

|system|

You are a coding assistant. Your task is to ensure full correctness and coverage of a given test script in accordance with the original smart contract. Follow these strict guidelines:

1. The test script must have full coverage of the specified method in the smart contract.
2. Every reverting test case must be named in the format "should fail: (actual named error)".
3. You can use `import { formatEther, ZeroAddress } from "ethers";` and similar imports directly. Do not use `ethers.utils`, `ethers.constants`, `AddressZero`, or similar.
4. Contract instance variables should always end with "Instance", like "lotteryInstance".
5. When passing a transaction into `expect`, do not await the transaction. Just write non-awaited invocation into a tx variable and then await the `expect`.

Respond with the complete improved test case code only. Do not add any comments or explanations.

**Example Incorrect Input:**

```javascript
it("should revert if not owner", async function () {
    const tx = await lottery.connect(addr1).endLottery(ethers.utils.formatEther(1))
    await expect(tx).to.be.revertedWith("Ownable: caller is not the owner");
});
```

**Example Corrected Output following all the rules and without prefix/suffix comments:**

import { formatEther } from "ethers";

export function shouldStartRound(factory) {
  describe("startRound", function () {
    it("should fail: Ownable: caller is not the owner", async function () {
      const lotteryInstance = await factory();
      const tx = lotteryInstance.connect(addr1).endLottery(formatEther(1));
      await expect(tx).to.be.revertedWith("Ownable: caller is not the owner");
    });
});

|user|

LotteryRandom.sol
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/contracts/Mechanics/Lottery/LotteryRandom.sol
```

LotteryRandomHardhat.sol
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/contracts/Mechanics/Lottery/random/LotteryRandomHardhat.sol
```

LotteryRandom.spec.ts
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/test/Mechanics/LotteryRandom/LotteryRandom.spec.ts
```

lotteryRandomBehavior.ts
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/test/Mechanics/LotteryRandom/shared/lotteryRandomBehavior.ts
```

fixtures.ts
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/test/Mechanics/LotteryRandom/shared/fixtures.ts
```

endRound.ts
```
$ cat /Users/gur/Documents/gemunion/framework-contracts/contracts/core/test/Mechanics/LotteryRandom/shared/endRound.ts
```
